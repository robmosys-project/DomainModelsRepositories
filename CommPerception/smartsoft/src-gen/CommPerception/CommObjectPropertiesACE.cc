//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommPerception/CommObjectPropertiesACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommPose3dACE.hh"
#include "CommObjectRecognitionObjects/CommObjectRelationACE.hh"

// serialization operator for element CommObjectProperties
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommPerceptionIDL::CommObjectProperties &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element is_valid
	good_bit = good_bit && cdr.write_boolean(data.is_valid);
	// serialize list-element object_id
	good_bit = good_bit && cdr.write_ulong(data.object_id);
	// serialize list-element object_type
	good_bit = good_bit && cdr << ACE_CString(data.object_type.c_str());
	// serialize list-element pose
	good_bit = good_bit && cdr << data.pose;
	// serialize list-element relations
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.relations.size());
	std::vector<CommObjectRecognitionObjectsIDL::CommObjectRelation>::const_iterator data_relationsIt;
	for(data_relationsIt=data.relations.begin(); data_relationsIt!=data.relations.end(); data_relationsIt++) {
		good_bit = good_bit && cdr << *data_relationsIt;
	}
	// serialize list-element fill_level
	good_bit = good_bit && cdr.write_double(data.fill_level);
	// serialize list-element surface_poses
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.surface_poses.size());
	std::vector<CommBasicObjectsIDL::CommPose3d>::const_iterator data_surface_posesIt;
	for(data_surface_posesIt=data.surface_poses.begin(); data_surface_posesIt!=data.surface_poses.end(); data_surface_posesIt++) {
		good_bit = good_bit && cdr << *data_surface_posesIt;
	}
	
	return good_bit;
}

// de-serialization operator for element CommObjectProperties
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommPerceptionIDL::CommObjectProperties &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element is_valid
	good_bit = good_bit && cdr.read_boolean(data.is_valid);
	// deserialize type element object_id
	good_bit = good_bit && cdr.read_ulong(data.object_id);
	// deserialize string-type element object_type
	ACE_CString data_object_type_str;
	good_bit = good_bit && cdr >> data_object_type_str;
	data.object_type = data_object_type_str.c_str();
	// deserialize type element pose
	good_bit = good_bit && cdr >> data.pose;
	// deserialize list-type element relations
	ACE_CDR::ULong data_relationsNbr;
	good_bit = good_bit && cdr >> data_relationsNbr;
	data.relations.clear();
	CommObjectRecognitionObjectsIDL::CommObjectRelation data_relationsItem;
	for(ACE_CDR::ULong i=0; i<data_relationsNbr; ++i) {
		good_bit = good_bit && cdr >> data_relationsItem;
		data.relations.push_back(data_relationsItem);
	}
	// deserialize type element fill_level
	good_bit = good_bit && cdr.read_double(data.fill_level);
	// deserialize list-type element surface_poses
	ACE_CDR::ULong data_surface_posesNbr;
	good_bit = good_bit && cdr >> data_surface_posesNbr;
	data.surface_poses.clear();
	CommBasicObjectsIDL::CommPose3d data_surface_posesItem;
	for(ACE_CDR::ULong i=0; i<data_surface_posesNbr; ++i) {
		good_bit = good_bit && cdr >> data_surface_posesItem;
		data.surface_poses.push_back(data_surface_posesItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject CommObjectProperties
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommPerception::CommObjectProperties &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommObjectProperties
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommPerception::CommObjectProperties &obj)
{
	return cdr >> obj.set();
}
