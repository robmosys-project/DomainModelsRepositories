//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommPerception/ObjectCoreCore.hh"

// serialization/deserialization operators
//#include "CommPerception/ObjectCoreACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommPerception 
{
	const char* ObjectCoreCore::getCompiledHash()
	{
		return CommPerceptionIDL::REPO_HASH;
	}
	
	void ObjectCoreCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommPerception::CommPoint2d(idl_ObjectCore.point2d)
		CommPerception::CommPoint2d::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommPose3d(idl_ObjectCore.pose)
		CommBasicObjects::CommPose3d::getAllHashValues(hashes);
		// get hash value(s) for CommObjectRecognitionObjects::CommObjectRelation(idl_ObjectCore.relations)
		CommObjectRecognitionObjects::CommObjectRelation::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommPose3d(idl_ObjectCore.surface_poses)
		CommBasicObjects::CommPose3d::getAllHashValues(hashes);
	}
	
	void ObjectCoreCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "ObjectCoreCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommPerception::CommPoint2d(idl_ObjectCore.point2d)
		CommPerception::CommPoint2d::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommPose3d(idl_ObjectCore.pose)
		CommBasicObjects::CommPose3d::checkAllHashValues(hashes);
		// check hash value(s) for CommObjectRecognitionObjects::CommObjectRelation(idl_ObjectCore.relations)
		CommObjectRecognitionObjects::CommObjectRelation::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommPose3d(idl_ObjectCore.surface_poses)
		CommBasicObjects::CommPose3d::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t ObjectCoreCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		boost::hash_combine(seed, data.is_valid);
		boost::hash_combine(seed, data.object_id);
		boost::hash_combine(seed, std::string(data.object_type.c_str()));
		seed += CommPerception::CommPoint2d::generateDataHash(data.point2d);
		seed += CommBasicObjects::CommPose3d::generateDataHash(data.pose);
		seed += CommObjectRecognitionObjects::CommObjectRelation::generateDataHash(data.relations);
		boost::hash_combine(seed, data.fill_level);
		seed += CommBasicObjects::CommPose3d::generateDataHash(data.surface_poses);
		
		return seed;
	}
	#endif
	
	// default constructor
	ObjectCoreCore::ObjectCoreCore()
	:	idl_ObjectCore()
	{  
		setIs_valid(false);
		setObject_id(0);
		setObject_type("");
		setPoint2d(CommPerception::CommPoint2d());
		setPose(CommBasicObjects::CommPose3d());
		setRelations(CommObjectRecognitionObjects::CommObjectRelation());
		setFill_level(-1.0);
		setSurface_poses(CommBasicObjects::CommPose3d());
	}
	
	ObjectCoreCore::ObjectCoreCore(const DATATYPE &data)
	:	idl_ObjectCore(data)
	{  }

	ObjectCoreCore::~ObjectCoreCore()
	{  }
	
	void ObjectCoreCore::to_ostream(std::ostream &os) const
	{
	  os << "ObjectCore(";
	  os << getIs_valid() << " ";
	  os << getObject_id() << " ";
	  os << getObject_type() << " ";
	  getPoint2d().to_ostream(os);
	  getPose().to_ostream(os);
	  getRelations().to_ostream(os);
	  os << getFill_level() << " ";
	  getSurface_poses().to_ostream(os);
	  os << ") ";
	}
	
	// convert to xml stream
	void ObjectCoreCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<is_valid>" << getIs_valid() << "</is_valid>";
		os << indent << "<object_id>" << getObject_id() << "</object_id>";
		os << indent << "<object_type>" << getObject_type() << "</object_type>";
		os << indent << "<point2d>";
		getPoint2d().to_xml(os, indent);
		os << indent << "</point2d>";
		os << indent << "<pose>";
		getPose().to_xml(os, indent);
		os << indent << "</pose>";
		os << indent << "<relations>";
		getRelations().to_xml(os, indent);
		os << indent << "</relations>";
		os << indent << "<fill_level>" << getFill_level() << "</fill_level>";
		os << indent << "<surface_poses>";
		getSurface_poses().to_xml(os, indent);
		os << indent << "</surface_poses>";
	}
	
	// restore from xml stream
	void ObjectCoreCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_is_valid("<is_valid>");
		static const Smart::KnuthMorrisPratt kmp_object_id("<object_id>");
		static const Smart::KnuthMorrisPratt kmp_object_type("<object_type>");
		static const Smart::KnuthMorrisPratt kmp_point2d("<point2d>");
		static const Smart::KnuthMorrisPratt kmp_pose("<pose>");
		static const Smart::KnuthMorrisPratt kmp_relations("<relations>");
		static const Smart::KnuthMorrisPratt kmp_fill_level("<fill_level>");
		static const Smart::KnuthMorrisPratt kmp_surface_poses("<surface_poses>");
		
		if(kmp_is_valid.search(is)) {
			bool is_validItem;
			is >> is_validItem;
			setIs_valid(is_validItem);
		}
		if(kmp_object_id.search(is)) {
			unsigned int object_idItem;
			is >> object_idItem;
			setObject_id(object_idItem);
		}
		if(kmp_object_type.search(is)) {
			std::string object_typeItem;
			is >> object_typeItem;
			setObject_type(object_typeItem);
		}
		if(kmp_point2d.search(is)) {
			CommPerception::CommPoint2d point2dItem;
			point2dItem.from_xml(is);
			setPoint2d(point2dItem);
		}
		if(kmp_pose.search(is)) {
			CommBasicObjects::CommPose3d poseItem;
			poseItem.from_xml(is);
			setPose(poseItem);
		}
		if(kmp_relations.search(is)) {
			CommObjectRecognitionObjects::CommObjectRelation relationsItem;
			relationsItem.from_xml(is);
			setRelations(relationsItem);
		}
		if(kmp_fill_level.search(is)) {
			double fill_levelItem;
			is >> fill_levelItem;
			setFill_level(fill_levelItem);
		}
		if(kmp_surface_poses.search(is)) {
			CommBasicObjects::CommPose3d surface_posesItem;
			surface_posesItem.from_xml(is);
			setSurface_poses(surface_posesItem);
		}
	}
	
	/*
	void ObjectCoreCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommPerceptionIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommPerceptionIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see ObjectCoreACE.hh)
		cdr << idl_ObjectCore;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_ObjectCore);
		cdr << data_hash;
		// std::cout << "ObjectCoreCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void ObjectCoreCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommPerceptionIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see ObjectCoreACE.hh)
		cdr >> idl_ObjectCore;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_ObjectCore);
		assert(data_hash == own_hash);
		// std::cout << "ObjectCoreCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommPerception */
