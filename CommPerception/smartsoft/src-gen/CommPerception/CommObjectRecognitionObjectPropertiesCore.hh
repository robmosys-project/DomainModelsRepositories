//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPERCEPTION_COMMOBJECTRECOGNITIONOBJECTPROPERTIES_CORE_H_
#define COMMPERCEPTION_COMMOBJECTRECOGNITIONOBJECTPROPERTIES_CORE_H_

#include "CommPerception/CommObjectRecognitionObjectPropertiesData.hh"
#include "CommBasicObjects/CommPosition3d.hh"
#include "CommObjectRecognitionObjects/CommObjectBelief.hh"
#include "CommObjectRecognitionObjects/CommTriMesh.hh"
#include "CommBasicObjects/CommPose3d.hh"
#include "CommObjectRecognitionObjects/CommObjectRelation.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPerception {
	
class CommObjectRecognitionObjectPropertiesCore {
protected:
	// data structure
	CommPerceptionIDL::CommObjectRecognitionObjectProperties idl_CommObjectRecognitionObjectProperties;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPerceptionIDL::CommObjectRecognitionObjectProperties DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommObjectRecognitionObjectPropertiesCore();
	CommObjectRecognitionObjectPropertiesCore(const DATATYPE &data);
	// default destructor
	virtual ~CommObjectRecognitionObjectPropertiesCore();
	
	const DATATYPE& get() const { return idl_CommObjectRecognitionObjectProperties; }
	operator const DATATYPE&() const { return idl_CommObjectRecognitionObjectProperties; }
	DATATYPE& set() { return idl_CommObjectRecognitionObjectProperties; }

	static inline std::string identifier(void) { return "CommPerception::CommObjectRecognitionObjectProperties"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_CommObjectRecognitionObjectProperties.is_valid; }
	inline CommObjectRecognitionObjectPropertiesCore& setIs_valid(const bool &is_valid) { idl_CommObjectRecognitionObjectProperties.is_valid = is_valid; return *this; }
	
	// getter and setter for element Object_id
	inline unsigned int getObject_id() const { return idl_CommObjectRecognitionObjectProperties.object_id; }
	inline CommObjectRecognitionObjectPropertiesCore& setObject_id(const unsigned int &object_id) { idl_CommObjectRecognitionObjectProperties.object_id = object_id; return *this; }
	
	// getter and setter for element Object_type
	inline std::string getObject_type() const { return idl_CommObjectRecognitionObjectProperties.object_type; }
	inline CommObjectRecognitionObjectPropertiesCore& setObject_type(const std::string &object_type) { idl_CommObjectRecognitionObjectProperties.object_type = object_type; return *this; }
	
	// getter and setter for element Pose
	inline CommBasicObjects::CommPose3d getPose() const { return CommBasicObjects::CommPose3d(idl_CommObjectRecognitionObjectProperties.pose); }
	inline CommObjectRecognitionObjectPropertiesCore& setPose(const CommBasicObjects::CommPose3d &pose) { idl_CommObjectRecognitionObjectProperties.pose = pose; return *this; }
	
	// getter and setter for element Dimension
	inline CommBasicObjects::CommPosition3d getDimension() const { return CommBasicObjects::CommPosition3d(idl_CommObjectRecognitionObjectProperties.dimension); }
	inline CommObjectRecognitionObjectPropertiesCore& setDimension(const CommBasicObjects::CommPosition3d &dimension) { idl_CommObjectRecognitionObjectProperties.dimension = dimension; return *this; }
	
	// getter and setter for element Beliefs
	/**
	 * Getter methods for element idl_CommObjectRecognitionObjectProperties.beliefs of type vector<CommObjectRecognitionObjects::CommObjectBelief>
	 */
	inline std::vector<CommObjectRecognitionObjects::CommObjectBelief> getBeliefsCopy() const { 
		return std::vector<CommObjectRecognitionObjects::CommObjectBelief>(idl_CommObjectRecognitionObjectProperties.beliefs.begin(), idl_CommObjectRecognitionObjectProperties.beliefs.end());
	}
	inline CommObjectRecognitionObjects::CommObjectBelief getBeliefsElemAtPos(const size_t &pos) const {
		return CommObjectRecognitionObjects::CommObjectBelief(idl_CommObjectRecognitionObjectProperties.beliefs[pos]);
	}
	inline size_t getBeliefsSize() const { return idl_CommObjectRecognitionObjectProperties.beliefs.size(); }
	inline bool isBeliefsEmpty() const { return idl_CommObjectRecognitionObjectProperties.beliefs.empty(); }
	/**
	 * Setter methods for idl_CommObjectRecognitionObjectProperties.beliefs of type vector<CommObjectRecognitionObjects::CommObjectBelief>
	 */
	inline CommObjectRecognitionObjectPropertiesCore& setBeliefs(const std::vector<CommObjectRecognitionObjects::CommObjectBelief> &beliefs) { 
		idl_CommObjectRecognitionObjectProperties.beliefs.assign(beliefs.begin(), beliefs.end());
		return *this;
	}
	inline bool setBeliefsElemAtPos(const size_t &pos, const CommObjectRecognitionObjects::CommObjectBelief &elem) {
		if(pos < idl_CommObjectRecognitionObjectProperties.beliefs.size()) {
			idl_CommObjectRecognitionObjectProperties.beliefs[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertBeliefsVectorAtPos(const size_t &pos, const std::vector<CommObjectRecognitionObjects::CommObjectBelief> &data) {
		if(pos < idl_CommObjectRecognitionObjectProperties.beliefs.size()) {
			idl_CommObjectRecognitionObjectProperties.beliefs.insert(idl_CommObjectRecognitionObjectProperties.beliefs.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeBeliefs(const size_t &size) { idl_CommObjectRecognitionObjectProperties.beliefs.resize(size); }
	inline bool eraseBeliefsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommObjectRecognitionObjectProperties.beliefs.size() ) {
			idl_CommObjectRecognitionObjectProperties.beliefs.erase(idl_CommObjectRecognitionObjectProperties.beliefs.begin()+pos, idl_CommObjectRecognitionObjectProperties.beliefs.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearBeliefs() { idl_CommObjectRecognitionObjectProperties.beliefs.clear(); }
	
	// getter and setter for element Mesh
	inline CommObjectRecognitionObjects::CommTriMesh getMesh() const { return CommObjectRecognitionObjects::CommTriMesh(idl_CommObjectRecognitionObjectProperties.mesh); }
	inline CommObjectRecognitionObjectPropertiesCore& setMesh(const CommObjectRecognitionObjects::CommTriMesh &mesh) { idl_CommObjectRecognitionObjectProperties.mesh = mesh; return *this; }
	
	// getter and setter for element Relations
	/**
	 * Getter methods for element idl_CommObjectRecognitionObjectProperties.relations of type vector<CommObjectRecognitionObjects::CommObjectRelation>
	 */
	inline std::vector<CommObjectRecognitionObjects::CommObjectRelation> getRelationsCopy() const { 
		return std::vector<CommObjectRecognitionObjects::CommObjectRelation>(idl_CommObjectRecognitionObjectProperties.relations.begin(), idl_CommObjectRecognitionObjectProperties.relations.end());
	}
	inline CommObjectRecognitionObjects::CommObjectRelation getRelationsElemAtPos(const size_t &pos) const {
		return CommObjectRecognitionObjects::CommObjectRelation(idl_CommObjectRecognitionObjectProperties.relations[pos]);
	}
	inline size_t getRelationsSize() const { return idl_CommObjectRecognitionObjectProperties.relations.size(); }
	inline bool isRelationsEmpty() const { return idl_CommObjectRecognitionObjectProperties.relations.empty(); }
	/**
	 * Setter methods for idl_CommObjectRecognitionObjectProperties.relations of type vector<CommObjectRecognitionObjects::CommObjectRelation>
	 */
	inline CommObjectRecognitionObjectPropertiesCore& setRelations(const std::vector<CommObjectRecognitionObjects::CommObjectRelation> &relations) { 
		idl_CommObjectRecognitionObjectProperties.relations.assign(relations.begin(), relations.end());
		return *this;
	}
	inline bool setRelationsElemAtPos(const size_t &pos, const CommObjectRecognitionObjects::CommObjectRelation &elem) {
		if(pos < idl_CommObjectRecognitionObjectProperties.relations.size()) {
			idl_CommObjectRecognitionObjectProperties.relations[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertRelationsVectorAtPos(const size_t &pos, const std::vector<CommObjectRecognitionObjects::CommObjectRelation> &data) {
		if(pos < idl_CommObjectRecognitionObjectProperties.relations.size()) {
			idl_CommObjectRecognitionObjectProperties.relations.insert(idl_CommObjectRecognitionObjectProperties.relations.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeRelations(const size_t &size) { idl_CommObjectRecognitionObjectProperties.relations.resize(size); }
	inline bool eraseRelationsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommObjectRecognitionObjectProperties.relations.size() ) {
			idl_CommObjectRecognitionObjectProperties.relations.erase(idl_CommObjectRecognitionObjectProperties.relations.begin()+pos, idl_CommObjectRecognitionObjectProperties.relations.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearRelations() { idl_CommObjectRecognitionObjectProperties.relations.clear(); }
	
	// getter and setter for element Fill_level
	inline double getFill_level() const { return idl_CommObjectRecognitionObjectProperties.fill_level; }
	inline CommObjectRecognitionObjectPropertiesCore& setFill_level(const double &fill_level) { idl_CommObjectRecognitionObjectProperties.fill_level = fill_level; return *this; }
	
	// getter and setter for element ObjectSurfacePoses
	/**
	 * Getter methods for element idl_CommObjectRecognitionObjectProperties.objectSurfacePoses of type vector<CommBasicObjects::CommPose3d>
	 */
	inline std::vector<CommBasicObjects::CommPose3d> getObjectSurfacePosesCopy() const { 
		return std::vector<CommBasicObjects::CommPose3d>(idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.begin(), idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.end());
	}
	inline CommBasicObjects::CommPose3d getObjectSurfacePosesElemAtPos(const size_t &pos) const {
		return CommBasicObjects::CommPose3d(idl_CommObjectRecognitionObjectProperties.objectSurfacePoses[pos]);
	}
	inline size_t getObjectSurfacePosesSize() const { return idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.size(); }
	inline bool isObjectSurfacePosesEmpty() const { return idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.empty(); }
	/**
	 * Setter methods for idl_CommObjectRecognitionObjectProperties.objectSurfacePoses of type vector<CommBasicObjects::CommPose3d>
	 */
	inline CommObjectRecognitionObjectPropertiesCore& setObjectSurfacePoses(const std::vector<CommBasicObjects::CommPose3d> &objectSurfacePoses) { 
		idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.assign(objectSurfacePoses.begin(), objectSurfacePoses.end());
		return *this;
	}
	inline bool setObjectSurfacePosesElemAtPos(const size_t &pos, const CommBasicObjects::CommPose3d &elem) {
		if(pos < idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.size()) {
			idl_CommObjectRecognitionObjectProperties.objectSurfacePoses[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertObjectSurfacePosesVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::CommPose3d> &data) {
		if(pos < idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.size()) {
			idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.insert(idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeObjectSurfacePoses(const size_t &size) { idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.resize(size); }
	inline bool eraseObjectSurfacePosesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.size() ) {
			idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.erase(idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.begin()+pos, idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearObjectSurfacePoses() { idl_CommObjectRecognitionObjectProperties.objectSurfacePoses.clear(); }
};

} /* namespace CommPerception */
#endif /* COMMPERCEPTION_COMMOBJECTRECOGNITIONOBJECTPROPERTIES_CORE_H_ */
