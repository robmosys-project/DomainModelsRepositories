//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPERCEPTION_COMMOBJECTPROPERTIES_CORE_H_
#define COMMPERCEPTION_COMMOBJECTPROPERTIES_CORE_H_

#include "CommPerception/CommObjectPropertiesData.hh"
#include "CommBasicObjects/CommPose3d.hh"
#include "CommObjectRecognitionObjects/CommObjectRelation.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPerception {
	
class CommObjectPropertiesCore {
protected:
	// data structure
	CommPerceptionIDL::CommObjectProperties idl_CommObjectProperties;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPerceptionIDL::CommObjectProperties DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommObjectPropertiesCore();
	CommObjectPropertiesCore(const DATATYPE &data);
	// default destructor
	virtual ~CommObjectPropertiesCore();
	
	const DATATYPE& get() const { return idl_CommObjectProperties; }
	operator const DATATYPE&() const { return idl_CommObjectProperties; }
	DATATYPE& set() { return idl_CommObjectProperties; }

	static inline std::string identifier(void) { return "CommPerception::CommObjectProperties"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_CommObjectProperties.is_valid; }
	inline CommObjectPropertiesCore& setIs_valid(const bool &is_valid) { idl_CommObjectProperties.is_valid = is_valid; return *this; }
	
	// getter and setter for element Object_id
	inline unsigned int getObject_id() const { return idl_CommObjectProperties.object_id; }
	inline CommObjectPropertiesCore& setObject_id(const unsigned int &object_id) { idl_CommObjectProperties.object_id = object_id; return *this; }
	
	// getter and setter for element Object_type
	inline std::string getObject_type() const { return idl_CommObjectProperties.object_type; }
	inline CommObjectPropertiesCore& setObject_type(const std::string &object_type) { idl_CommObjectProperties.object_type = object_type; return *this; }
	
	// getter and setter for element Pose
	inline CommBasicObjects::CommPose3d getPose() const { return CommBasicObjects::CommPose3d(idl_CommObjectProperties.pose); }
	inline CommObjectPropertiesCore& setPose(const CommBasicObjects::CommPose3d &pose) { idl_CommObjectProperties.pose = pose; return *this; }
	
	// getter and setter for element Relations
	/**
	 * Getter methods for element idl_CommObjectProperties.relations of type vector<CommObjectRecognitionObjects::CommObjectRelation>
	 */
	inline std::vector<CommObjectRecognitionObjects::CommObjectRelation> getRelationsCopy() const { 
		return std::vector<CommObjectRecognitionObjects::CommObjectRelation>(idl_CommObjectProperties.relations.begin(), idl_CommObjectProperties.relations.end());
	}
	inline CommObjectRecognitionObjects::CommObjectRelation getRelationsElemAtPos(const size_t &pos) const {
		return CommObjectRecognitionObjects::CommObjectRelation(idl_CommObjectProperties.relations[pos]);
	}
	inline size_t getRelationsSize() const { return idl_CommObjectProperties.relations.size(); }
	inline bool isRelationsEmpty() const { return idl_CommObjectProperties.relations.empty(); }
	/**
	 * Setter methods for idl_CommObjectProperties.relations of type vector<CommObjectRecognitionObjects::CommObjectRelation>
	 */
	inline CommObjectPropertiesCore& setRelations(const std::vector<CommObjectRecognitionObjects::CommObjectRelation> &relations) { 
		idl_CommObjectProperties.relations.assign(relations.begin(), relations.end());
		return *this;
	}
	inline bool setRelationsElemAtPos(const size_t &pos, const CommObjectRecognitionObjects::CommObjectRelation &elem) {
		if(pos < idl_CommObjectProperties.relations.size()) {
			idl_CommObjectProperties.relations[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertRelationsVectorAtPos(const size_t &pos, const std::vector<CommObjectRecognitionObjects::CommObjectRelation> &data) {
		if(pos < idl_CommObjectProperties.relations.size()) {
			idl_CommObjectProperties.relations.insert(idl_CommObjectProperties.relations.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeRelations(const size_t &size) { idl_CommObjectProperties.relations.resize(size); }
	inline bool eraseRelationsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommObjectProperties.relations.size() ) {
			idl_CommObjectProperties.relations.erase(idl_CommObjectProperties.relations.begin()+pos, idl_CommObjectProperties.relations.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearRelations() { idl_CommObjectProperties.relations.clear(); }
	
	// getter and setter for element Fill_level
	inline double getFill_level() const { return idl_CommObjectProperties.fill_level; }
	inline CommObjectPropertiesCore& setFill_level(const double &fill_level) { idl_CommObjectProperties.fill_level = fill_level; return *this; }
	
	// getter and setter for element Surface_poses
	/**
	 * Getter methods for element idl_CommObjectProperties.surface_poses of type vector<CommBasicObjects::CommPose3d>
	 */
	inline std::vector<CommBasicObjects::CommPose3d> getSurface_posesCopy() const { 
		return std::vector<CommBasicObjects::CommPose3d>(idl_CommObjectProperties.surface_poses.begin(), idl_CommObjectProperties.surface_poses.end());
	}
	inline CommBasicObjects::CommPose3d getSurface_posesElemAtPos(const size_t &pos) const {
		return CommBasicObjects::CommPose3d(idl_CommObjectProperties.surface_poses[pos]);
	}
	inline size_t getSurface_posesSize() const { return idl_CommObjectProperties.surface_poses.size(); }
	inline bool isSurface_posesEmpty() const { return idl_CommObjectProperties.surface_poses.empty(); }
	/**
	 * Setter methods for idl_CommObjectProperties.surface_poses of type vector<CommBasicObjects::CommPose3d>
	 */
	inline CommObjectPropertiesCore& setSurface_poses(const std::vector<CommBasicObjects::CommPose3d> &surface_poses) { 
		idl_CommObjectProperties.surface_poses.assign(surface_poses.begin(), surface_poses.end());
		return *this;
	}
	inline bool setSurface_posesElemAtPos(const size_t &pos, const CommBasicObjects::CommPose3d &elem) {
		if(pos < idl_CommObjectProperties.surface_poses.size()) {
			idl_CommObjectProperties.surface_poses[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertSurface_posesVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::CommPose3d> &data) {
		if(pos < idl_CommObjectProperties.surface_poses.size()) {
			idl_CommObjectProperties.surface_poses.insert(idl_CommObjectProperties.surface_poses.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeSurface_poses(const size_t &size) { idl_CommObjectProperties.surface_poses.resize(size); }
	inline bool eraseSurface_posesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommObjectProperties.surface_poses.size() ) {
			idl_CommObjectProperties.surface_poses.erase(idl_CommObjectProperties.surface_poses.begin()+pos, idl_CommObjectProperties.surface_poses.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearSurface_poses() { idl_CommObjectProperties.surface_poses.clear(); }
};

} /* namespace CommPerception */
#endif /* COMMPERCEPTION_COMMOBJECTPROPERTIES_CORE_H_ */
