//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPERCEPTION_COMMOBJECTPROPERTIES_CORE_H_
#define COMMPERCEPTION_COMMOBJECTPROPERTIES_CORE_H_

#include "CommPerception/CommObjectPropertiesData.hh"
#include "CommPerception/ObjectCore.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPerception {
	
class CommObjectPropertiesCore {
protected:
	// data structure
	CommPerceptionIDL::CommObjectProperties idl_CommObjectProperties;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPerceptionIDL::CommObjectProperties DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommObjectPropertiesCore();
	CommObjectPropertiesCore(const DATATYPE &data);
	// default destructor
	virtual ~CommObjectPropertiesCore();
	
	const DATATYPE& get() const { return idl_CommObjectProperties; }
	operator const DATATYPE&() const { return idl_CommObjectProperties; }
	DATATYPE& set() { return idl_CommObjectProperties; }

	static inline std::string identifier(void) { return "CommPerception::CommObjectProperties"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Objects
	/**
	 * Getter methods for element idl_CommObjectProperties.objects of type vector<CommPerception::ObjectCore>
	 */
	inline std::vector<CommPerception::ObjectCore> getObjectsCopy() const { 
		return std::vector<CommPerception::ObjectCore>(idl_CommObjectProperties.objects.begin(), idl_CommObjectProperties.objects.end());
	}
	inline CommPerception::ObjectCore getObjectsElemAtPos(const size_t &pos) const {
		return CommPerception::ObjectCore(idl_CommObjectProperties.objects[pos]);
	}
	inline size_t getObjectsSize() const { return idl_CommObjectProperties.objects.size(); }
	inline bool isObjectsEmpty() const { return idl_CommObjectProperties.objects.empty(); }
	/**
	 * Setter methods for idl_CommObjectProperties.objects of type vector<CommPerception::ObjectCore>
	 */
	inline CommObjectPropertiesCore& setObjects(const std::vector<CommPerception::ObjectCore> &objects) { 
		idl_CommObjectProperties.objects.assign(objects.begin(), objects.end());
		return *this;
	}
	inline bool setObjectsElemAtPos(const size_t &pos, const CommPerception::ObjectCore &elem) {
		if(pos < idl_CommObjectProperties.objects.size()) {
			idl_CommObjectProperties.objects[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertObjectsVectorAtPos(const size_t &pos, const std::vector<CommPerception::ObjectCore> &data) {
		if(pos < idl_CommObjectProperties.objects.size()) {
			idl_CommObjectProperties.objects.insert(idl_CommObjectProperties.objects.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeObjects(const size_t &size) { idl_CommObjectProperties.objects.resize(size); }
	inline bool eraseObjectsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommObjectProperties.objects.size() ) {
			idl_CommObjectProperties.objects.erase(idl_CommObjectProperties.objects.begin()+pos, idl_CommObjectProperties.objects.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearObjects() { idl_CommObjectProperties.objects.clear(); }
};

} /* namespace CommPerception */
#endif /* COMMPERCEPTION_COMMOBJECTPROPERTIES_CORE_H_ */
