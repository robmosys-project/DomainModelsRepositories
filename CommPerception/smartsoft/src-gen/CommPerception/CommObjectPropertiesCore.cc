//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommPerception/CommObjectPropertiesCore.hh"

// serialization/deserialization operators
//#include "CommPerception/CommObjectPropertiesACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommPerception 
{
	const char* CommObjectPropertiesCore::getCompiledHash()
	{
		return CommPerceptionIDL::REPO_HASH;
	}
	
	void CommObjectPropertiesCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommPerception::ObjectCore(idl_CommObjectProperties.objects)
		CommPerception::ObjectCore::getAllHashValues(hashes);
	}
	
	void CommObjectPropertiesCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommObjectPropertiesCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommPerception::ObjectCore(idl_CommObjectProperties.objects)
		CommPerception::ObjectCore::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommObjectPropertiesCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		std::vector<CommPerceptionIDL::ObjectCore>::const_iterator data_objectsIt;
		for(data_objectsIt=data.objects.begin(); data_objectsIt!=data.objects.end(); data_objectsIt++) {
			seed += CommPerception::ObjectCore::generateDataHash(*data_objectsIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	CommObjectPropertiesCore::CommObjectPropertiesCore()
	:	idl_CommObjectProperties()
	{  
		setObjects(std::vector<CommPerception::ObjectCore>());
	}
	
	CommObjectPropertiesCore::CommObjectPropertiesCore(const DATATYPE &data)
	:	idl_CommObjectProperties(data)
	{  }

	CommObjectPropertiesCore::~CommObjectPropertiesCore()
	{  }
	
	void CommObjectPropertiesCore::to_ostream(std::ostream &os) const
	{
	  os << "CommObjectProperties(";
	  std::vector<CommPerception::ObjectCore>::const_iterator objectsIt;
	  std::vector<CommPerception::ObjectCore> objectsList = getObjectsCopy();
	  for(objectsIt=objectsList.begin(); objectsIt!=objectsList.end(); objectsIt++) {
	  	objectsIt->to_ostream(os);
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void CommObjectPropertiesCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		std::vector<CommPerception::ObjectCore>::const_iterator objectsIt;
		std::vector<CommPerception::ObjectCore> objectsList = getObjectsCopy();
		counter = 0;
		os << indent << "<objectsList n=\"" << objectsList.size() << "\">";
		for(objectsIt=objectsList.begin(); objectsIt!=objectsList.end(); objectsIt++) {
			os << indent << "<objects i=\"" << counter++ << "\">";
			objectsIt->to_xml(os, indent);
			os << indent << "</objects>";
		}
		os << indent << "</objectsList>";
	}
	
	// restore from xml stream
	void CommObjectPropertiesCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_objectsList("<objectsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_objects("\">");
		
		if(kmp_objectsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			CommPerception::ObjectCore objectsItem;
			std::vector<CommPerception::ObjectCore> objectsList;
			kmp_objects.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_objects.search(is)) {
					objectsItem.from_xml(is);
					objectsList.push_back(objectsItem);
				}
			}
			setObjects(objectsList);
		}
	}
	
	/*
	void CommObjectPropertiesCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommPerceptionIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommPerceptionIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommObjectPropertiesACE.hh)
		cdr << idl_CommObjectProperties;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommObjectProperties);
		cdr << data_hash;
		// std::cout << "CommObjectPropertiesCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommObjectPropertiesCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommPerceptionIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommObjectPropertiesACE.hh)
		cdr >> idl_CommObjectProperties;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommObjectProperties);
		assert(data_hash == own_hash);
		// std::cout << "CommObjectPropertiesCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommPerception */
