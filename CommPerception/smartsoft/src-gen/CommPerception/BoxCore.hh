//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPERCEPTION_BOX_CORE_H_
#define COMMPERCEPTION_BOX_CORE_H_

#include "CommPerception/BoxData.hh"
#include "CommBasicObjects/CommPosition3d.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPerception {
	
class BoxCore {
protected:
	// data structure
	CommPerceptionIDL::Box idl_Box;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPerceptionIDL::Box DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	BoxCore();
	BoxCore(const DATATYPE &data);
	// default destructor
	virtual ~BoxCore();
	
	const DATATYPE& get() const { return idl_Box; }
	operator const DATATYPE&() const { return idl_Box; }
	DATATYPE& set() { return idl_Box; }

	static inline std::string identifier(void) { return "CommPerception::Box"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element P1
	inline CommBasicObjects::CommPosition3d getP1() const { return CommBasicObjects::CommPosition3d(idl_Box.p1); }
	inline BoxCore& setP1(const CommBasicObjects::CommPosition3d &p1) { idl_Box.p1 = p1; return *this; }
	
	// getter and setter for element P2
	inline CommBasicObjects::CommPosition3d getP2() const { return CommBasicObjects::CommPosition3d(idl_Box.p2); }
	inline BoxCore& setP2(const CommBasicObjects::CommPosition3d &p2) { idl_Box.p2 = p2; return *this; }
	
	// getter and setter for element P3
	inline CommBasicObjects::CommPosition3d getP3() const { return CommBasicObjects::CommPosition3d(idl_Box.p3); }
	inline BoxCore& setP3(const CommBasicObjects::CommPosition3d &p3) { idl_Box.p3 = p3; return *this; }
	
	// getter and setter for element P4
	inline CommBasicObjects::CommPosition3d getP4() const { return CommBasicObjects::CommPosition3d(idl_Box.p4); }
	inline BoxCore& setP4(const CommBasicObjects::CommPosition3d &p4) { idl_Box.p4 = p4; return *this; }
};

} /* namespace CommPerception */
#endif /* COMMPERCEPTION_BOX_CORE_H_ */
