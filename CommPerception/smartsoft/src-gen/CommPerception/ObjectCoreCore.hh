//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPERCEPTION_OBJECTCORE_CORE_H_
#define COMMPERCEPTION_OBJECTCORE_CORE_H_

#include "CommPerception/ObjectCoreData.hh"
#include "CommBasicObjects/CommPose3d.hh"
#include "CommObjectRecognitionObjects/CommObjectRelation.hh"
#include "CommPerception/CommPoint2d.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPerception {
	
class ObjectCoreCore {
protected:
	// data structure
	CommPerceptionIDL::ObjectCore idl_ObjectCore;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPerceptionIDL::ObjectCore DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	ObjectCoreCore();
	ObjectCoreCore(const DATATYPE &data);
	// default destructor
	virtual ~ObjectCoreCore();
	
	const DATATYPE& get() const { return idl_ObjectCore; }
	operator const DATATYPE&() const { return idl_ObjectCore; }
	DATATYPE& set() { return idl_ObjectCore; }

	static inline std::string identifier(void) { return "CommPerception::ObjectCore"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_ObjectCore.is_valid; }
	inline ObjectCoreCore& setIs_valid(const bool &is_valid) { idl_ObjectCore.is_valid = is_valid; return *this; }
	
	// getter and setter for element Object_id
	inline unsigned int getObject_id() const { return idl_ObjectCore.object_id; }
	inline ObjectCoreCore& setObject_id(const unsigned int &object_id) { idl_ObjectCore.object_id = object_id; return *this; }
	
	// getter and setter for element Object_type
	inline std::string getObject_type() const { return idl_ObjectCore.object_type; }
	inline ObjectCoreCore& setObject_type(const std::string &object_type) { idl_ObjectCore.object_type = object_type; return *this; }
	
	// getter and setter for element Point2d
	inline CommPerception::CommPoint2d getPoint2d() const { return CommPerception::CommPoint2d(idl_ObjectCore.point2d); }
	inline ObjectCoreCore& setPoint2d(const CommPerception::CommPoint2d &point2d) { idl_ObjectCore.point2d = point2d; return *this; }
	
	// getter and setter for element Pose
	inline CommBasicObjects::CommPose3d getPose() const { return CommBasicObjects::CommPose3d(idl_ObjectCore.pose); }
	inline ObjectCoreCore& setPose(const CommBasicObjects::CommPose3d &pose) { idl_ObjectCore.pose = pose; return *this; }
	
	// getter and setter for element Relations
	inline CommObjectRecognitionObjects::CommObjectRelation getRelations() const { return CommObjectRecognitionObjects::CommObjectRelation(idl_ObjectCore.relations); }
	inline ObjectCoreCore& setRelations(const CommObjectRecognitionObjects::CommObjectRelation &relations) { idl_ObjectCore.relations = relations; return *this; }
	
	// getter and setter for element Fill_level
	inline double getFill_level() const { return idl_ObjectCore.fill_level; }
	inline ObjectCoreCore& setFill_level(const double &fill_level) { idl_ObjectCore.fill_level = fill_level; return *this; }
	
	// getter and setter for element Surface_poses
	inline CommBasicObjects::CommPose3d getSurface_poses() const { return CommBasicObjects::CommPose3d(idl_ObjectCore.surface_poses); }
	inline ObjectCoreCore& setSurface_poses(const CommBasicObjects::CommPose3d &surface_poses) { idl_ObjectCore.surface_poses = surface_poses; return *this; }
};

} /* namespace CommPerception */
#endif /* COMMPERCEPTION_OBJECTCORE_CORE_H_ */
