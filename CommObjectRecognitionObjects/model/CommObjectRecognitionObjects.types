#import CommBasicObjects.*;

CommObjectsRepository CommObjectRecognitionObjects version 1.0 {
	
	CommObject CommObjectRecognitionEventResult {
		state: ObjectRecognitionState
		environment_id: UInt32= 0
		object_id: UInt32[*]
	}
	
	CommObject CommObjectRecognitionEventState {
		state: ObjectRecognitionState
		object_id: UInt32[*]
	}
	
	CommObject CommObjectRecognitionId {
		id: UInt32
	}
	
	CommObject CommSimpleObjectEventParameter {
		oldState: SimpleObjectState
	}
	
	CommObject CommObjectRecognitionObjectProperties {
		is_valid: Boolean= false
		object_id: UInt32
		object_type: String
		pose: CommPose3d
		dimension: CommPosition3d
		beliefs: CommObjectBelief[*]
		mesh: CommTriMesh
		relations: CommObjectRelation[*]
		fill_level: Double= -1.0
		/*
		 * "Used for grasping at an surface of the object"
		 */
		objectSurfacePoses : CommPose3d[*]
	}
	
	CommObject CommObjectRecognitionEnvironment {
		is_valid: Boolean= false
		objects: CommObjectRecognitionObjectProperties[*]
	}
	
	CommObject CommSimpleObjectEventResult {
		state: SimpleObjectState
		x: Int32
		y: Int32
	}
	
	CommObject SimpleObjectEventState {
		newState: SimpleObjectState
		x: Int32
		y: Int32
	}
	
	CommObject OcrEventState {
		environment_id: Int32
	}
	
	CommObject CommOcrText {
		text: String
		belief: Double
	}
	
	//event reply and query request
	CommObject CommOcrId {
		environment_id: Int32
	}
	
	Enumeration ObjectRecognitionState {
		VISIBLE
		INVISIBLE
		FINISHED
	}
	
	Enumeration RelationType {
		ON_TOP_OF
		BELOW_OF
	}
	
	Enumeration SimpleObjectState {
		UNKOWN
		OBJECT_FOUND
		OBJECT_NOT_FOUND
	}
	
	CommObject CommObjectBelief {
		type: String
		probability: Double
		pose: CommPose3d
		cov: Double[*]
		validPosePdf: Boolean= false
	}
	
	CommObject CommTriMesh {
		vertices_p1: UInt32[*]
		vertices_p2: UInt32[*]
		vertices_p3: UInt32[*]
		points_x: Double[*]
		points_y: Double[*]
		points_z: Double[*]
	}
	
	CommObject CommObjectRelation {
		type: RelationType
		relatedObjectId: UInt32
	}
	
	CommObject CommObjectRecognitionInformation {
		id: UInt32
		roi: ROI
		color: Color
	}
	
	CommObject CommColorDetection {
		color: Color
		roi: ROI
	}
	
		/*
		 * "Basic Perception"
		 */
		 
	CommObject Color {
		//TODO with multiple ranges
		name: Colors
		min_range: HSVSpace
		max_range: HSVSpace
	}
	
	Enumeration Colors {
		RED
		BLUE
		WHITE
		GRAY
	}	
	CommObject BGRSpace {
		b: Double = 0.0
		g: Double = 0.0
		r: Double = 0.0
	}
	CommObject HSVSpace {
		//OpenCV range : H: 0 - 180, S: 0 - 255, V: 0 - 255
		h: Double = 0.0
		s: Double = 0.0
		v: Double = 0.0
	}
	CommObject ROI {
		point: CommPoint2d
		width: Double = 0.0
		height: Double = 0.0
	}
	CommObject CommPoint2d {
		x: Double = 0.0
		y: Double = 0.0
	}
	
}