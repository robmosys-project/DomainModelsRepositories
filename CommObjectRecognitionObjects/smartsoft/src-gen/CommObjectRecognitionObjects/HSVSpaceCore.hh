//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMOBJECTRECOGNITIONOBJECTS_HSVSPACE_CORE_H_
#define COMMOBJECTRECOGNITIONOBJECTS_HSVSPACE_CORE_H_

#include "CommObjectRecognitionObjects/HSVSpaceData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommObjectRecognitionObjects {
	
class HSVSpaceCore {
protected:
	// data structure
	CommObjectRecognitionObjectsIDL::HSVSpace idl_HSVSpace;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommObjectRecognitionObjectsIDL::HSVSpace DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	HSVSpaceCore();
	HSVSpaceCore(const DATATYPE &data);
	// default destructor
	virtual ~HSVSpaceCore();
	
	const DATATYPE& get() const { return idl_HSVSpace; }
	operator const DATATYPE&() const { return idl_HSVSpace; }
	DATATYPE& set() { return idl_HSVSpace; }

	static inline std::string identifier(void) { return "CommObjectRecognitionObjects::HSVSpace"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element H
	inline double getH() const { return idl_HSVSpace.h; }
	inline HSVSpaceCore& setH(const double &h) { idl_HSVSpace.h = h; return *this; }
	
	// getter and setter for element S
	inline double getS() const { return idl_HSVSpace.s; }
	inline HSVSpaceCore& setS(const double &s) { idl_HSVSpace.s = s; return *this; }
	
	// getter and setter for element V
	inline double getV() const { return idl_HSVSpace.v; }
	inline HSVSpaceCore& setV(const double &v) { idl_HSVSpace.v = v; return *this; }
};

} /* namespace CommObjectRecognitionObjects */
#endif /* COMMOBJECTRECOGNITIONOBJECTS_HSVSPACE_CORE_H_ */
