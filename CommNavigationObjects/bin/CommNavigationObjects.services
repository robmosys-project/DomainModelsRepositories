// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

ServiceDefRepository CommNavigationObjects version 1.0
{
	/**
	 * Base-related service-definitions
	 */
	JoiningServiceDefinition NavigationVelocityService {
		SendPattern <DataType=CommBasicObjects.CommNavigationVelocity>
	}

	JoiningServiceDefinition LocalizationUpdateService {
		SendPattern < DataType = CommBasicObjects.CommBasePositionUpdate >
	}

	ForkingServiceDefinition BatteryEventService {
		EventPattern <
			ActivationType=CommBasicObjects.CommBatteryParameter
			EventType=CommBasicObjects.CommBatteryEvent
			EventStateType=CommBasicObjects.CommBatteryState
		>
	}

	/**
	 * Planner service definitions
	 */
	ForkingServiceDefinition PlannerGoalService {
		PushPattern < DataType = CommNavigationObjects.CommPlannerGoal >
	}

	ForkingServiceDefinition PlannerEventService {
		EventPattern <
			ActivationType=CommNavigationObjects.CommPlannerEventParameter
			EventType=CommNavigationObjects.CommPlannerEventResult
			EventStateType=CommNavigationObjects.PlannerEventState
		>
	}

	/**
	 * Mapping service-definitions
	 */
	ForkingServiceDefinition CurrGridMapPushService {
		PushPattern <DataType=CommNavigationObjects.CommGridMap>
	}

	RequestAnswerServiceDefinition CurrGridMapQueryService {
		QueryPattern <RequestType=CommNavigationObjects.CommGridMapRequest AnswerType=CommNavigationObjects.CommGridMap>
	}

	RequestAnswerServiceDefinition LongTermGridMapQueryService {
		QueryPattern <RequestType=CommNavigationObjects.CommGridMapRequest AnswerType=CommNavigationObjects.CommGridMap>
	}

	/**
	 * CDL-related service-definitions
	 */
	ForkingServiceDefinition GoalEventService {
		EventPattern < 
			ActivationType=CommNavigationObjects.CommCdlGoalEventParameter 
			EventType=CommNavigationObjects.CommCdlGoalEventResult 
			EventStateType=CommNavigationObjects.CdlGoalEventState
		> 
	}

	ForkingServiceDefinition RobotBlockedEventService {
		EventPattern <
			ActivationType=CommNavigationObjects.CommCdlRobotBlockedEventParameter 
			EventType=CommNavigationObjects.CommCdlRobotBlockedEventResult 
			EventStateType=CommNavigationObjects.CommCdlRobotBlockedState
		>
	}

	ForkingServiceDefinition IRService {
		PushPattern<DataType=CommBasicObjects.CommMobileIRScan>
	}

	/**
	 * Coordination service-definitions
	 */
	 
 	CoordinationServiceDefinition BaseCoordinationService {
		StatePattern < lifecycle ComponentLifecycle with CommBasicObjects.RobotBaseModes >
		ParameterPattern < CommBasicObjects.BaseParams >
		CommunicationServiceUsage baseState uses CommBasicObjects.BaseStateQueryService
		CommunicationServiceUsage bumperEvent uses CommBasicObjects.BumperEventService
		CommunicationServiceUsage batteryEvent uses BatteryEventService
	}
	 
	 
	CoordinationServiceDefinition CdlCoordinationService {
		ParameterPattern < CommNavigationObjects.CdlParameter >
		StatePattern < lifecycle ComponentLifecycle with  CommNavigationObjects.CdlStates >
		CommunicationServiceUsage goalEvent uses GoalEventService
		CommunicationServiceUsage blockedEvent uses RobotBlockedEventService
	}

	CoordinationServiceDefinition MapperCoordinationService {
		ParameterPattern < CommNavigationObjects.MapperParams >
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.MappingStates >
	}

	CoordinationServiceDefinition PlannerCoordinationService {
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.PathPlannerStates>
		ParameterPattern < CommNavigationObjects.PlannerParams>
		CommunicationServiceUsage plannerEvent uses PlannerEventService
	}

}