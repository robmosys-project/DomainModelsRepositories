//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "DomainVision/CommDepthImageACE.hh"
#include <ace/SString.h>
#include "DomainVision/enumImageDistortionModelData.hh"
#include "DomainVision/enumDepthFormatTypeData.hh"

// serialization operator for element CommDepthImage
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainVisionIDL::CommDepthImage &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element width
	good_bit = good_bit && cdr.write_ulong(data.width);
	// serialize list-element height
	good_bit = good_bit && cdr.write_ulong(data.height);
	// serialize list-element format
	good_bit = good_bit && cdr.write_long(data.format);
	// serialize list-element pixel_size
	good_bit = good_bit && cdr.write_ulong(data.pixel_size);
	// serialize list-element min_distcance
	good_bit = good_bit && cdr.write_double(data.min_distcance);
	// serialize list-element max_distcance
	good_bit = good_bit && cdr.write_double(data.max_distcance);
	// serialize list-element data
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.data.size());
	good_bit = good_bit && cdr.write_octet_array(data.data.data(), data.data.size());
	// serialize list-element scale
	good_bit = good_bit && cdr.write_double(data.scale);
	// serialize list-element intrinsic_m
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.intrinsic_m.size());
	good_bit = good_bit && cdr.write_double_array(data.intrinsic_m.data(), data.intrinsic_m.size());
	// serialize list-element extrinsic_m
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.extrinsic_m.size());
	good_bit = good_bit && cdr.write_double_array(data.extrinsic_m.data(), data.extrinsic_m.size());
	// serialize list-element stereo_m
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.stereo_m.size());
	good_bit = good_bit && cdr.write_double_array(data.stereo_m.data(), data.stereo_m.size());
	// serialize list-element distortion_m
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.distortion_m.size());
	good_bit = good_bit && cdr.write_double_array(data.distortion_m.data(), data.distortion_m.size());
	// serialize list-element distortion_model
	good_bit = good_bit && cdr.write_long(data.distortion_model);
	// serialize list-element seq_count
	good_bit = good_bit && cdr.write_ulong(data.seq_count);
	// serialize list-element is_valid
	good_bit = good_bit && cdr.write_boolean(data.is_valid);
	
	return good_bit;
}

// de-serialization operator for element CommDepthImage
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainVisionIDL::CommDepthImage &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element width
	good_bit = good_bit && cdr.read_ulong(data.width);
	// deserialize type element height
	good_bit = good_bit && cdr.read_ulong(data.height);
	// deserialize type element format
	good_bit = good_bit && cdr.read_long(data.format);
	// deserialize type element pixel_size
	good_bit = good_bit && cdr.read_ulong(data.pixel_size);
	// deserialize type element min_distcance
	good_bit = good_bit && cdr.read_double(data.min_distcance);
	// deserialize type element max_distcance
	good_bit = good_bit && cdr.read_double(data.max_distcance);
	// deserialize list-type element data
	ACE_CDR::ULong data_dataNbr;
	good_bit = good_bit && cdr >> data_dataNbr;
	data.data.resize(data_dataNbr);
	good_bit = good_bit && cdr.read_octet_array(data.data.data(), data_dataNbr);
	// deserialize type element scale
	good_bit = good_bit && cdr.read_double(data.scale);
	// deserialize list-type element intrinsic_m
	ACE_CDR::ULong data_intrinsic_mNbr;
	good_bit = good_bit && cdr >> data_intrinsic_mNbr;
	data.intrinsic_m.resize(data_intrinsic_mNbr);
	good_bit = good_bit && cdr.read_double_array(data.intrinsic_m.data(), data_intrinsic_mNbr);
	// deserialize list-type element extrinsic_m
	ACE_CDR::ULong data_extrinsic_mNbr;
	good_bit = good_bit && cdr >> data_extrinsic_mNbr;
	data.extrinsic_m.resize(data_extrinsic_mNbr);
	good_bit = good_bit && cdr.read_double_array(data.extrinsic_m.data(), data_extrinsic_mNbr);
	// deserialize list-type element stereo_m
	ACE_CDR::ULong data_stereo_mNbr;
	good_bit = good_bit && cdr >> data_stereo_mNbr;
	data.stereo_m.resize(data_stereo_mNbr);
	good_bit = good_bit && cdr.read_double_array(data.stereo_m.data(), data_stereo_mNbr);
	// deserialize list-type element distortion_m
	ACE_CDR::ULong data_distortion_mNbr;
	good_bit = good_bit && cdr >> data_distortion_mNbr;
	data.distortion_m.resize(data_distortion_mNbr);
	good_bit = good_bit && cdr.read_double_array(data.distortion_m.data(), data_distortion_mNbr);
	// deserialize type element distortion_model
	good_bit = good_bit && cdr.read_long(data.distortion_model);
	// deserialize type element seq_count
	good_bit = good_bit && cdr.read_ulong(data.seq_count);
	// deserialize type element is_valid
	good_bit = good_bit && cdr.read_boolean(data.is_valid);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommDepthImage
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainVision::CommDepthImage &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommDepthImage
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainVision::CommDepthImage &obj)
{
	return cdr >> obj.set();
}
