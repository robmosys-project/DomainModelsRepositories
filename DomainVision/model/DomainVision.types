// --------------------------------------------------------------------------
//
//  Copyright (C) 2013 Servicerobotik Ulm
//
//        schlegel@hs-ulm.de
//        http://www.servicerobotik-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#import CommBasicObjects.*;

CommObjectsRepository DomainVision version 1.0.0 {
	CommObject CommVideoImage {
		parameter: ImageParameters
		data: UInt8[*]
		sensor_pose: CommPose3d
		base_state: CommBaseState
		is_valid: Boolean
		seq_count: UInt32
		intrinsic_m: Double[*]
		distortion_m: Double[*]
		distortion_model : ImageDistortionModel = BROWN_CONRADY
	}
	
	Enumeration ImageDistortionModel {
		NONE
		MODIFIED_BROWN_CONRADY
		INVERSE_BROWN_CONRADY		
		BROWN_CONRADY
	}
	
	
	
	Enumeration DepthFormatType {
		UINT8
		UINT16
		FLOAT
		DOUBLE
	}
	
	CommObject ImageParameters {
		width: UInt32
		height: UInt32
		format: FormatType
		depth: UInt32
		size: UInt32
	}
	
	Enumeration FormatType {
		GREY
		RGB565
		RGB555
		RGB24
		RGB32
		YUV422
		YUYV
		UYVY
		YUV420P
		YUV422P
		YUV411P		
	}
	
	CommObject CommDepthImage {
		
		/** pixels */
		width: UInt32
		/** pixels */
		height: UInt32
		format: DepthFormatType
		
		/** bit per pixel */
		pixel_size: UInt32
		
		/** in meter */
		min_distcance : Double
		/** in meter */
		max_distcance : Double
				
		data: UInt8[*]
		scale: Double
		intrinsic_m: Double[*]
		/** rotation[3][3] + translation[3] in single row */
		extrinsic_m: Double[*]
		/** homogeneous transformation matrix 4x4 */
		stereo_m: Double[*]
		distortion_m: Double[*]
		distortion_model : ImageDistortionModel = BROWN_CONRADY
		seq_count: UInt32
		
		is_valid : Boolean
	}
	
	CommObject CommRGBDImage {
		color_image : CommVideoImage
		depth_image : CommDepthImage
				
		base_state  : CommBaseState
		sensor_pose : CommPose3d
		seq_count: UInt32
		is_valid : Boolean
		
	}
	
	CommObject Comm3dPointCloud {
		valid: Boolean= false
		points: CommPosition3d[*]
	}

}
