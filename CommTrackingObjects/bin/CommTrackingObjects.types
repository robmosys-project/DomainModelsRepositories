// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#import CommBasicObjects.*

CommObjectsRepository CommTrackingObjects version 1.0.0 {
	CommObject CommLaserTrackingData {
		scan: CommMobileLaserScan
		objects: CommLaserTrackedObject[*]
	}
	
	Enumeration TrackingGoalType {
		XY_ROBOT
		XY_MAP
		XY_MAP_RAW
		ANGLE_DIST
	}
	
	CommObject CommTrackingGoal {
		trackingType : TrackingGoalType = XY_MAP_RAW
		angle: Double
		distance: Double
		x: Double
		y: Double
		isValid: Boolean
		cov: Double[*]
		goalCount : UInt64 = 0
	}
	CommObject CommLaserTrackedObject {
		id: UInt32
		first_point: UInt16
		last_point: UInt16
	}
	
	CommObject CommTrackedPerson {
		id: UInt32
		x : Double
		y : Double
		z : Double =0.0 // For tracking with RealSense		
	}
	
	CommObject CommPersonTrackingList {
		trackedPersons : CommTrackedPerson [*]
		followedPerson : Int32
		isValid : Boolean = false
	}
	
	CommObject PersonLostEventState {
		newState: PersonLostEventType
	}
	CommObject CommPersonLostEventParameter {
		oldState: PersonLostEventType
	}
	CommObject CommPersonLostEventResult {
		state: PersonLostEventType
	}
	Enumeration PersonLostEventType {
		PERSON_LOST
		PERSON_FOUND
		PERSON_LOST_CROWD
	}
	Enumeration FollowMeRegainTagType {
		REGAIN_RESET
	}
	
	// person detection
	CommObject CommPersonDetectionEventResult {
		environment_id: UInt32= 0
		person_id: UInt32[*]
	}
	CommObject PersonDetectionEventState{
		environment_id: UInt32= 0
		person_id: UInt32[*]
	}
	CommObject CommDetectedPerson {
		id: UInt32= 0
		is_valid: Boolean= false
		pose: CommPose3d
		base_state: CommBaseState
	}
	CommObject CommPersonId {
		id: UInt32= 0
	}
	CommObject CommValidPosition {
		valid: Boolean= false
	}
	CommObject LeaderEventState {
		type: LeaderEventType
		goal_x: Int32
		goal_y: Int32
	}
	CommObject CommLeaderEventParam {
		type: LeaderEventType
	}
	CommObject CommLeaderEventResult {
		type: LeaderEventType
		goal_x: Int32
		goal_y: Int32
	}
	Enumeration ScanType {
		NONE_SCAN_TYPE
		FULL_SCAN
		SINGLE_SCAN
	}
	Enumeration PersonManagerParam {
		NONE_MANAGER_PARAM
		RESET_MANAGER
		DEACTIVATE_MANAGER
		ACTIVATE_MANAGER
	}
	Enumeration ScanMode {
		NONE_SCAN_MODE
		CONTINUOUS
		ONE_SHOT
	}
	Enumeration ScanParam {
		NONE_SCAN_PARAM
		FULL_SCAN_PARAM
	}

	Enumeration LeaderEventType {
		TOO_CLOSE
		LEADER_IMAGE_SUCCESS
		LEADER_FOUND
		TOO_MANY_PERSONS
		NO_FACES_FOUND
		TOO_FEW_HANDS
		WAVE_DETECTED
		UNKNOWN
	}


}
